name: Build and Release

on:
  push:
    branches: [ main, master ]
  
  push:
    tags:
      - 'v*.*.*'
  
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: bcmr-x86_64-linux
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: bcmr-aarch64-linux
            
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            name: bcmr-x86_64-macos
            
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: bcmr-aarch64-macos
            
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: bcmr-x86_64-windows.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/bcmr

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            target/${{ matrix.target }}/release/bcmr
            target/${{ matrix.target }}/release/bcmr.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare release assets
        run: |
          cd dist
          for dir in */; do
            cd "$dir"
            if [ -f bcmr ]; then
              tar czf "../${dir%/}.tar.gz" bcmr
            elif [ -f bcmr.exe ]; then
              zip "../${dir%/}.zip" bcmr.exe
            fi
            cd ..
          done

      - name: Generate changelog
        id: changelog
        run: |
          # 获取当前版本
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          # 获取上一个版本标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 📋 Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### 🔄 Changes since ${PREVIOUS_TAG}:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> CHANGELOG.md
          else
            echo "### 🎉 Initial Release" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## 📦 Download" >> CHANGELOG.md
          echo "Choose the appropriate binary for your platform:" >> CHANGELOG.md
          echo "- **Linux x86_64**: bcmr-x86_64-linux.tar.gz" >> CHANGELOG.md
          echo "- **Linux ARM64**: bcmr-aarch64-linux.tar.gz" >> CHANGELOG.md
          echo "- **macOS Intel**: bcmr-x86_64-macos.tar.gz" >> CHANGELOG.md
          echo "- **macOS Apple Silicon**: bcmr-aarch64-macos.tar.gz" >> CHANGELOG.md
          echo "- **Windows**: bcmr-x86_64-windows.zip" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.tar.gz dist/*.zip
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true